package Day14;

public class Day14_2 {
	
	public static void main(String[] args) {
		
		// 클래스 멤버
			// 필드
				// 1. 접근제한자 
					// private : 현재 클래스 
						// 목적 : 필드 직접접근 제한 [필드에 저장/호출시 검사(무결성유지)]
					// public : 모든 클래스 
					// default(생략시) : 동일한 패키지
					// protected : 동일한 패키지 but 서로 다른 패키지의 슈퍼클래스 접근 가능 
					// static, final = 상수
				// 2. 자료형
					// 1. 기본 자료형 [int, double, boolean ...]
					// 2. 클래스 [사용자가 만든 클래스]
					// 3. 클래스 [미리 만들어진 클래스] : API (String ,Scanner ...)
					// 4. 인터페이스
					// 5. [ ] 배열
				// 3. 변수명(객체명)
					// 본인이 원하는대로 but 중복 X
					// 1. 클래스 명의 소문자 es) Scanner scanner = ..
					// 변수, 객체, 인터페이스 ,배열 ...
			// 생성자 [객체 생성 시 초기값]
				// 1. 접근제한자
				// 2. 생성자이름 = 클래스이름 [만일 다를경우 오류]
				// 3. 인수
					// 필요에 따른 인수 선택
					// 1. 빈 생성자 [관례적 목적 : 메소드 호출용]
					// 2. 모든필드 생성자 [관례적 목적 : 모든 필드 저장/호출]
					// 3. 특정필드 생성자 [몇 가지 필드만 저장]
						// 상황에 따른 객체 생성 시 필요 필드
		
				// this 
		
			// 메소드 [코드 묶음, 재사용, 인수에 따라 서로다른 결과물]
				// 1. 접근제한자
				// 2. 반환자료형
					// void : 반환값 [메소드 종료시 돌려주는 값 X]
					// 기본자료형 / 클래스 / 인터페이스 / 배열 ...
				// 3. 메소드이름 [관려적 소문자]
				// 4. 인수
					// 메소드 호출시 메소드 안으로 들어오는 데이터
					// 객체명.메소드(3) => 메소드(int 변수명)
						// 인수의 자료형 동일하되 변수명은 자유
						// 객체명.메소드(유재석) -> 메소드(int 변수명) X
						// 같은 문자열 
	}

}
